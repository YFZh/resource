 
第四章　Ｃ语言程序设计

本课介绍Ｃ语言程序设计的基本方法和基本的程序语句。
从程序流程的角度来看，程序可以分为三种基本结构， 即顺序结构、分支结构、循环结构。 这三种基本结构可以组成所有的各种复杂程序。Ｃ语言提供了多种语句来实现这些程序结构。 本章介绍这些基本语句及其应用，使读者对Ｃ程序有一个初步的认识， 为后面各章的学习打下基础。

Ｃ程序的语句

Ｃ程序的执行部分是由语句组成的。 程序的功能也是由执行语句实现的。
C语句可分为以下五类：
1.表达式语句
2.函数调用语句
3.控制语句
4.复合语句
5.空语句

1.表达式语句

表达式语句由表达式加上分号“；”组成。其一般形式为： 表达式； 执行表达式语句就是计算表达式的值。例如： x=y+z; 赋值语句y+z; 加法运算语句，但计算结果不能保留，无实际意义i++; 自增1语句，i值增1


2.函数调用语句

由函数名、实际参数加上分号“；”组成。其一般形式为： 函数名(实际参数表)； 执行函数语句就是调用函数体并把实际参数赋予函数定义中的形式参数，然后执行被调函数体中的语句，求取函数值。(在第五章函数中再详细介绍)例如printf("C Program");调用库函数，输出字符串。

3.控制语句

控制语句用于控制程序的流程， 以实现程序的各种结构方式。
它们由特定的语句定义符组成。Ｃ语言有九种控制语句。 可分成以下三类：
(1) 条件判断语句
　　 if语句，switch语句
(2) 循环执行语句
　　 do while语句，while语句，for语句
(3) 转向语句
　　 break语句，goto语句，continue语句，return语句

4.复合语句

把多个语句用括号{}括起来组成的一个语句称复合语句。 在程序中应把复合语句看成是单条语句，而不是多条语句，例如
{
x=y+z;
a=b+c;
printf(“%d%d”，x，a)；
}
是一条复合语句。复合语句内的各条语句都必须以分号“;”结尾，在括号“}”外不能加分号。

5.空语句

只有分号“；”组成的语句称为空语句。 空语句是什么也不执行的语句。在程序中空语句可用来作空循环体。例如 while(getchar()!='\n'); 本语句的功能是，只要从键盘输入的字符不是回车则重新输入。这里的循环体为空语句。

赋值语句

赋值语句是由赋值表达式再加上分号构成的表达式语句。 其一般形式为： 变量=表达式; 赋值语句的功能和特点都与赋值表达式相同。 它是程序中使用最多的语句之一。 在赋值语句的使用中需要注意以下几点：

1.由于在赋值符“=”右边的表达式也可以又是一个赋值表达式，因此，下述形式 变量=(变量=表达式); 是成立的，从而形成嵌套的情形。其展开之后的一般形式为： 变量=变量=…=表达式;
例如：
a=b=c=d=e=5;按照赋值运算符的右接合性，因此实际上等效于：
e=5;
d=e;
c=d;
b=c;
a=b;
2.注意在变量说明中给变量赋初值和赋值语句的区别。给变量赋初值是变量说明的一部分，赋初值后的变量与其后的其它同类变量之间仍必须用逗号间隔，而赋值语句则必须用分号结尾。
3.在变量说明中，不允许连续给多个变量赋初值。 如下述说明是错误的： int a=b=c=5 必须写为 int a=5,b=5,c=5; 而赋值语句允许连续赋值
4.注意赋值表达式和赋值语句的区别。赋值表达式是一种表达式，它可以出现在任何允许表达式出现的地方，而赋值语句则不能。
下述语句是合法的： if((x=y+5)>0) z=x; 语句的功能是，若表达式x=y+5大于0则z=x。下述语句是非法的： if((x=y+5;)>0) z=x; 因为=y+5;是语句，不能出现在表达式中。

数据输出语句

本小节介绍的是向标准输出设备显示器输出数据的语句。在Ｃ语言中，所有的数据输入／输出都是由库函数完成的。 因此都是函数语句。本小节先介绍printf函数和putchar函数。printf函数printf函数称为格式输出函数，其关键字最末一个字母f即为“格式”(format)之意。其功能是按用户指定的格式， 把指定的数据显示到显示器屏幕上。在前面的例题中我们已多次使用过这个函数。

一、printf函数调用的一般形式

printf函数是一个标准库函数，它的函数原型在头文件“stdio.h”中。但作为一个特例，不要求在使用 printf 函数之前必须包含stdio.h文件。printf函数调用的一般形式为： printf(“格式控制字符串”，输出表列)其中格式控制字符串用于指定输出格式。 格式控制串可由格式字符串和非格式字符串两种组成。格式字符串是以%开头的字符串，在%后面跟有各种格式字符，以说明输出数据的类型、形式、长度、小数位数等。如“%d”表示按十进制整型输出，“%ld”表示按十进制长整型输出，“%c”表示按字符型输出等。后面将专门给予讨论。

非格式字符串在输出时原样照印，在显示中起提示作用。 输出表列中给出了各个输出项， 要求格式字符串和各输出项在数量和类型上应该一一对应。
void main()
{
int a=88,b=89;
printf("%d %d\n",a,b);
printf("%d,%d\n",a,b);
printf("%c,%c\n",a,b);
printf("a=%d,b=%d",a,b);
}
a<--8,b<--89

printf("%d %d\n",a,b);
printf("%d,%d\n",a,b);
printf("%c,%c\n",a,b);
printf("a=%d,b=%d",a,b);
本例中四次输出了a,b的值，但由于格式控制串不同，输出的结果也不相同。第四行的输出语句格式控制串中，两格式串%d 之间加了一个空格(非格式字符)，所以输出的a,b值之间有一个空格。第五行的printf语句格式控制串中加入的是非格式字符逗号， 因此输出的a,b值之间加了一个逗号。第六行的格式串要求按字符型输出 a,b值。第七行中为了提示输出结果又增加了非格式字符串。

二、格式字符串

在Turbo C中格式字符串的一般形式为： [标志][输出最小宽度][.精度][长度]类型 其中方括号[]中的项为可选项。各项的意义介绍如下：
1.类型类型字符用以表示输出数据的类型，其格式符和意义下表所示：
表示输出类型的格式字符 　　　　　　格式字符意义
d 　　　　　　　　　　　　　　　　以十进制形式输出带符号整数(正数不输出符号)
o 　　　　　　　　　　　　　　　　以八进制形式输出无符号整数(不输出前缀O)
x 　　　　　　　　　　　　　　　　以十六进制形式输出无符号整数(不输出前缀OX)
u 　　　　　　　　　　　　　　　　以十进制形式输出无符号整数
f 　　　　　　　　　　　　　　　　以小数形式输出单、双精度实数
e 　　　　　　　　　　　　　　　　以指数形式输出单、双精度实数
g 　　　　　　　　　　　　　　　　以%f%e中较短的输出宽度输出单、双精度实数
c 　　　　　　　　　　　　　　　　输出单个字符
s 　　　　　　　　　　　　　　　　输出字符串
2.标志
标志字符为-、+、#、空格四种，其意义下表所示：
标志格式字符 　　　　　标 志 意 义
- 　　　　　　　　　结果左对齐，右边填空格
+ 　　　　　　　　　输出符号(正号或负号)空格输出值为正时冠以空格，为负时冠以负号
# 　　　　　　　　　对c，s，d，u类无影响；对o类， 在输出时加前
缀o　　　　　　　　 对x类，在输出时加前缀0x；对e,g,f 类当结果有小数时才给出小数点
3.输出最小宽度
用十进制整数来表示输出的最少位数。 若实际位数多于定义的宽度，则按实际位数输出， 若实际位数少于定义的宽度则补以空格或0。
4.精度
精度格式符以“.”开头，后跟十进制整数。本项的意义是：如果输出数字，则表示小数的位数；如果输出的是字符， 则表示输出字符的个数；若实际位数大于所定义的精度数，则截去超过的部分。
5.长度
长度格式符为h,l两种，h表示按短整型量输出，l表示按长整型量输出。
void main(){
int a=15;
float b=138.3576278;
double c=35648256.3645687;
char d='p';
printf("a=%d,%5d,%o,%x\n",a,a,a,a);
printf("b=%f,%lf,%5.4lf,%e\n",b,b,b,b);
printf("c=%lf,%f,%8.4lf\n",c,c,c);
printf("d=%c,%8c\n",d,d);
} a<--15
b<--138.3576278
c<--35648256.3645687
d<--'p' main()
{
int a=29;
float b=1243.2341;
double c=24212345.24232;
char c='h'
printf("a=%d,%5d,%o,%x\n",a,a,a,a);
printf("b=%f,%lf,%5.4lf,%e\n",b,b,b,b);
printf("c=%lf,%f,%8.4lf\n",c,c,c);
printf("d=%c,%8c\n",d,d);
}
本例第七行中以四种格式输出整型变量a的值，其中“%5d ”要求输出宽度为5，而a值为15只有两位故补三个空格。 第八行中以四种格式输出实型量b的值。其中“%f”和“%lf ”格式的输出相同，说明“l”符对“f”类型无影响。“%5.4lf”指定输出宽度为5，精度为4，由于实际长度超过5故应该按实际位数输出，小数位数超过4位部分被截去。第九行输出双精度实数，“%8.4lf ”由于指定精度为4位故截去了超过4位的部分。第十行输出字符量d，其中“%bc ”指定输出宽度为8故在输出字符p之前补加7个空格。

使用printf函数时还要注意一个问题， 那就是输出表列中的求值顺序。不同的编译系统不一定相同，可以从左到右， 也可从右到左。Turbo C是按从右到左进行的。如把例2.13改写如下述形式：
void main(){
int i=8;
printf("%d\n%d\n%d\n%d\n%d\n%d\n",++i,--i,i--,i++,-i--);
} i<--8

这个程序与例2.13相比只是把多个printf语句改一个printf 语句输出。但从结果可以看出是不同的。为什么结果会不同呢?就是因为printf函数对输出表中各量求值的顺序是自右至左进行 的。在式中，先对最后一项“-i--”求值，结果为-8,然后i自减1后为7。 再对“-i++”项求值得-7，然后i自增1后为8。再对“i--”项求值得8，然后i再自减1后为7。再求“i++”项得7，然后I再自增1后为8。 再求“--i”项，i先自减1后输出，输出值为7。 最后才求输出表列中的第一项“++i”，此时i自增1后输出8。但是必须注意， 求值顺序虽是自右至左，但是输出顺序还是从左至右， 因此得到的结果是上述输出结果。

字符输出函数

putchar 函数

putchar 函数是字符输出函数， 其功能是在显示器上输出单个字符。其一般形式为： putchar(字符变量) 例如：
putchar('A'); 输出大写字母A
putchar(x); 输出字符变量x的值
putchar('\n'); 换行 对控制字符则执行控制功能，不在屏幕上显示。 使用本函数前必须要用文件包含命令：
#include<stdio.h>
#include <stdio.h>
void main(){
char a='B',b='o',c='k';
putchar(a);putchar(b);putchar(b);putchar(c);putchar('\t');
putchar(a);putchar(b);
putchar('\n');
putchar(b);putchar(c);
}

数据输入语句

Ｃ语言的数据输入也是由函数语句完成的。 本节介绍从标准输入设备―键盘上输入数据的函数scanf和getchar。 scanf函数 scanf函数称为格式输入函数，即按用户指定的格式从键盘上把数据输入到指定的变量之中。

一、scanf函数的一般形式

scanf函数是一个标准库函数，它的函数原型在头文件“stdio.h”中，与printf函数相同，Ｃ语言也允许在使用scanf函数之前不必包含stdio.h文件。scanf函数的一般形式为： scanf(“格式控制字符串”，地址表列); 其中，格式控制字符串的作用与printf函数相同，但不能显示非格式字符串， 也就是不能显示提示字符串。地址表列中给出各变量的地址。 地址是由地址运算符“&”后跟变量名组成的。例如，&a,&b分别表示变量a和变量b 的地址。这个地址就是编译系统在内存中给a,b变量分配的地址。在Ｃ语言中，使用了地址这个概念，这是与其它语言不同的。 应该把变量的值和变量的地址这两个不同的概念区别开来。变量的地址是C编译系统分配的，用户不必关心具体的地址是多少。 变量的地址和变量值的关系如下： &a--->a567 a为变量名，567是变量的值?amp;a是变量a的地址。在赋值表达式中给变量赋值，如： a=567 在赋值号左边是变量名，不能写地址，而scanf函数在本质上也是给变量赋值，但要求写变量的地址，如&a。 这两者在形式上是不同的。&是一个取地址运算符，&a是一个表达式，其功能是求变量的地址。
void main(){
int a,b,c;
printf("input a,b,c\n");
scanf("%d%d%d",&a,&b,&c);
printf("a=%d,b=%d,c=%d",a,b,c);
}
注意&的用法!
在本例中，由于scanf函数本身不能显示提示串，故先用printf语句在屏幕上输出提示，请用户输入a、b、c的值。执行scanf语句，则退出TC屏幕进入用户屏幕等待用户输入。用户输入7、8、9后按下回车键，此时，系统又将返回TC屏幕。在scanf语句的格式串中由于没有非格式字符在“%d%d%d”之间作输入时的间隔， 因此在输入时要用一个以上的空格或回车键作为每两个输入数之间的间隔。
如： 7 8 9
或
7
8
9

格式字符串

格式字符串的一般形式为： %[*][输入数据宽度][长度]类型 其中有方括号[]的项为任选项。各项的意义如下：
1.类型
表示输入数据的类型，其格式符和意义下表所示。
格式 　　　字符意义
d 　　　　输入十进制整数
o 　　　　输入八进制整数
x 　　　　输入十六进制整数
u 　　　　输入无符号十进制整数
f或e 　　 输入实型数(用小数形式或指数形式)
c 　　　　输入单个字符
s 　　　　输入字符串
2.“*”符
用以表示该输入项读入后不赋予相应的变量，即跳过该输入值。 如 scanf("%d %*d %d",&a,&b);当输入为：1 2 3 时，把1赋予a，2被跳过，3赋予b。
3.宽度
用十进制整数指定输入的宽度(即字符数)。例如： scanf("%5d",&a);
输入：
12345678
只把12345赋予变量a，其余部分被截去。又如： scanf("%4d%4d",&a,&b);
输入：
12345678将把1234赋予a，而把5678赋予b。
4.长度
长度格式符为l和h，l表示输入长整型数据(如%ld) 和双精度浮点数(如%lf)。h表示输入短整型数据。
使用scanf函数还必须注意以下几点：
a. scanf函数中没有精度控制，如： scanf("%5.2f",&a); 是非法的。不能企图用此语句输入小数为2位的实数。
b. scanf中要求给出变量地址，如给出变量名则会出错。如 scanf("%d",a);是非法的，应改为scnaf("%d",&a);才是合法的。
c. 在输入多个数值数据时，若格式控制串中没有非格式字符作输入数据之间的间隔则可用空格，TAB或回车作间隔。C编译在碰到空格，TAB，回车或非法数据(如对“%d”输入“12A”时，A即为非法数据)时即认为该数据结束。
d. 在输入字符数据时，若格式控制串中无非格式字符，则认为所有输入的字符均为有效字符。例如：
scanf("%c%c%c",&a,&b,&c);
输入为：
d e f
则把'd'赋予a, 'f'赋予b,'e'赋予c。只有当输入为：
def
时，才能把'd'赋于a,'e'赋予b,'f'赋予c。 如果在格式控制中加入空格作为间隔，如 scanf ("%c %c %c",&a,&b,&c);则输入时各数据之间可加空格。
void main(){
char a,b;
printf("input character a,b\n");
scanf("%c%c",&a,&b);
printf("%c%c\n",a,b);
}
scanf("'C14F14%c%c",&a,&b);
printf("%c%c\n",a,b); 由于scanf函数"%c%c"中没有空格，输入M N，结果输出只有M。
而输入改为MN时则可输出MN两字符，见下面的输入运行情况： input character a,b
MN
MN
void main(){
char a,b;
printf("input character a,b\n");
scanf("%c %c",&a,&b);
printf("\n%c%c\n",a,b);
}
scanf("%c %c",&a,&b); 本例表示scanf格式控制串"%c %c"之间有空格时， 输入的数据之间可以有空格间隔。e. 如果格式控制串中有非格式字符则输入时也要输入该非格式字符。
例如：
scanf("%d,%d,%d",&a,&b,&c); 其中用非格式符“ , ”作间隔符，故输入时应为： 5,6,7
又如： scanf("a=%d,b=%d,c=%d",&a,&b,&c);
则输入应为
a=5,b=6,c=7g. 如输入的数据与输出的类型不一致时，虽然编译能够通过，但结果将不正确。
void main(){
int a;
printf("input a number\n");
scanf("%d",&a);
printf("%ld",a);
}
由于输入数据类型为整型， 而输出语句的格式串中说明为长整型，因此输出结果和输入数据不符。如改动程序如下：
void main(){
long a;
printf("input a long integer\n");
scanf("%ld",&a);
printf("%ld",a);
}
运行结果为：
input a long integer
1234567890
1234567890 当输入数据改为长整型后，输入输出数据相等。

键盘输入函数
getchar函数getchar函数的功能是从键盘上输入一个字符。其一般形式为： getchar(); 通常把输入的字符赋予一个字符变量，构成赋值语句，如：
char c;
c=getchar();#include<stdio.h>
void main(){
char c;
printf("input a character\n");
c=getchar();
putchar(c);
}
使用getchar函数还应注意几个问题：
1.getchar函数只能接受单个字符，输入数字也按字符处理。输入多于一个字符时，只接收第一个字符。
2.使用本函数前必须包含文件“stdio.h”。
3.在TC屏幕下运行含本函数程序时，将退出TC 屏幕进入用户屏幕等待用户输入。输入完毕再返回TC屏幕。
void main(){
char a,b,c;
printf("input character a,b,c\n");
scanf("%c %c %c",&a,&b,&c);
printf("%d,%d,%d\n%c,%c,%c\n",a,b,c,a-32,b-32,c-32);
}
输入三个小写字母
输出其ASCII码和对应的大写字母。
void main(){
int a;
long b;
float f;
double d;
char c;
printf("%d,%d,%d,%d,%d",sizeof(a),sizeof(b),sizeof(f)
,sizeof(d),sizeof(c));
}
输出各种数据类型的字节长度。


分支结构程序

关系运算符和表达式

在程序中经常需要比较两个量的大小关系， 以决定程序下一步的工作。比较两个量的运算符称为关系运算符。 在Ｃ语言中有以下关系运算符：
< 小于
<= 小于或等于
> 大于
>= 大于或等于
== 等于
!= 不等于
关系运算符都是双目运算符，其结合性均为左结合。 关系运算符的优先级低于算术运算符，高于赋值运算符。 在六个关系运算符中，<,<=,>,>=的优先级相同，高于==和!=，==和!=的优先级相同。
关系表达式
关系表达式的一般形式为： 表达式 关系运算符 表达式 例如：a+b>c-d,x>3/2,'a'+1<c,-i-5*j==k+1;都是合法的关系表达式。由于表达式也可以又是关系表达式。 因此也允许出现嵌套的情况，例如：a>(b>c),a!=(c==d)等。关系表达式的值是“真”和“假”，用“1”和“0”表示。
如： 5>0的值为“真”，即为1。(a=3)>(b=5)由于3>5不成立，故其值为假，即为0。
void main(){
char c='k';
int i=1,j=2,k=3;
float x=3e+5,y=0.85;
printf("%d,%d\n",'a'+5<c,-i-2*j>=k+1);
printf("%d,%d\n",1<j<5,x-5.25<=x+y);
printf("%d,%d\n",i+j+k==-2*j,k==j==i+5);
}
char c='k';
int i=1,j=2,k=3;
float x=3e+5,y=0.85;
printf("%d,%d\n",'a'+5<c,-i-2*j>=k+1);
printf("%d,%d\n",1<j<5,x-5.25<=x+y);
printf("%d,%d\n",i+j+k==-2*j,k==j==i+5);
在本例中求出了各种关系运算符的值。 字符变量是以它对应的ASCII码参与运算的。对于含多个关系运算符的表达式，如k==j==i+5,根据运算符的左结合性，先计算k==j,该式不成立，其值为0，再计算0==i+5，也不成立，故表达式值为0。

逻辑运算符和表达式

逻辑运算符Ｃ语言中提供了三种逻辑运算符 && 与运算　|| 或运算　! 非运算 与运算符&&和或运算符||均为双目运算符。具有左结合性。 非
运算符!为单目运算符，具有右结合性。逻辑运算符和其它运算符优先级的关系可表示如下：
按照运算符的优先顺序可以得出：
a>b && c>d等价于(a>b) && (c>d)
!b==c||d<a等价于((!b)==c)||(d<a)
a+b>c && x+y<b等价于((a+b)>c) && ((x+y)<b)
逻辑运算的值
逻辑运算的值也为“真”和“假”两种，用“1”和“0 ”来表示。其求值规则如下：
1.与运算&&参与运算的两个量都为真时，结果才为真，否则为假。例如，5>0 && 4>2,由于5>0为真，4>2也为真，相与的结果也为真。
2.或运算||参与运算的两个量只要有一个为真，结果就为真。 两个量都为假时，结果为假。例如：5>0||5>8,由于5>0为真，相或的结果也就为真
3.非运算!参与运算量为真时，结果为假；参与运算量为假时，结果为真。
例如：!(5>0)的结果为假。
虽然Ｃ编译在给出逻辑运算值时，以“1”代表“真”，“0 ”代表“假”。 但反过来在判断一个量是为“真”还是为“假”时，以“0”代表“假”，以非“0”的数值作为“真”。例如：由于5和3均为非“0”因此5&&3的值为“真”，即为1。
又如：5||0的值为“真”，即为1。
逻辑表达式逻辑表达式的一般形式为： 表达式 逻辑运算符 表达式 其中的表达式可以又是逻辑表达式，从而组成了嵌套的情形。例如：(a&&b)&&c根据逻辑运算符的左结合性，上式也可写为： a&&b&&c 逻辑表达式的值是式中各种逻辑运算的最后值，以“1”和“0”分别代表“真”和“假”。
void main(){
char c='k';
int i=1,j=2,k=3;
float x=3e+5,y=0.85;
printf("%d,%d\n",!x*!y,!!!x);
printf("%d,%d\n",x||i&&j-3,i<j&&x<y);
printf("%d,%d\n",i==5&&c&&(j=8),x+y||i+j+k);
} char c='k';
int i=1,j=2,k=3;
float x=3e+5,y=0.85;
printf("%d,%d\n",!x*!y,!!!x);
printf("%d,%d\n",x||i&&j-3,i<j&&x<y);
printf("%d,%d\n",i==5&&c&&(j=8),x+y||i+j+k);
本例中!x和!y分别为0，!x*!y也为0，故其输出值为0。由于x为非0，故!!!x的逻辑值为0。对x|| i && j-3式，先计算j-3的值为非0，再求i && j-3的逻辑值为1，故x||i&&j-3的逻辑值为 1。对i<j&&x<y式，由于i<j的值为1，而x<y为0故表达式的值为1，0相与，最后为0，对i==5&&c&&(j=8)式，由于i==5为假，即值为0， 该表达式由两个与运算组成，所以整个表达式的值为0。对于式x+ y||i+j+k　由于x+y的值为非0，故整个或表达式的值为1。

ｉｆ语句

用if语句可以构成分支结构。它根据给定的条件进行判断， 以决定执行某个分支程序段。Ｃ语言的if语句有三种基本形式。

1.第一种形式为基本形式 if(表达式) 语句； 其语义是：如果表达式的值为真，则执行其后的语句， 否则不执行该语句。其过程可表示为下图
void main(){
int a,b,max;
printf("\n input two numbers: ");
scanf("%d%d",&a,&b);
max=a;
if (max<b) max=b;
printf("max=%d",max);
}
输入两个整数，输出其中的大数。
scanf("%d%d",&a,&b);
max=a;
if (max<b) max=b;
printf("max=%d",max);

本例程序中，输入两个数a,b。把a先赋予变量max，再用if语句判别max和b的大小，如max小于b，则把b赋予max。因此max中总是大数，最后输出max的值。
2.第二种形式为if-else形式
if(表达式)
语句1；
else
语句2；
其语义是：如果表达式的值为真，则执行语句1，否则执行语句2 。
void main(){
int a, b;
printf("input two numbers: ");
scanf("%d%d",&a,&b);
if(a>b)
printf("max=%d\n",a);
else
printf("max=%d\n",b);
}
输入两个整数，输出其中的大数。改用if-else语句判别a,b的大小，若a大，则输出a，否则输出b。
3.第三种形式为if-else-if形式
前二种形式的if语句一般都用于两个分支的情况。 当有多个分支选择时，可采用if-else-if语句，其一般形式为：
if(表达式1)
语句1；
else if(表达式2)
语句2；
else if(表达式3)
语句3；
…
else if(表达式m)
语句m；
else
语句n；
其语义是：依次判断表达式的值，当出现某个值为真时， 则执行其对应的语句。然后跳到整个if语句之外继续执行程序。 如果所有的表达式均为假，则执行语句n 。 然后继续执行后续程序。 if-else-if语句的执行过程如图3―3所示。
#include"stdio.h"
void main(){
char c;
printf("input a character: ");
c=getchar();
if(c<32)
printf("This is a control character\n");
else if(c>='0'&&c<='9')
printf("This is a digit\n");
else if(c>='A'&&c<='Z')
printf("This is a capital letter\n");
else if(c>='a'&&c<='z')
printf("This is a small letter\n");
else
printf("This is an other character\n");
}
if(c<32)
printf("This is a control character\n");
else if(c>='0'&&c<='9')
printf("This is a digit\n");
else if(c>='A'&&c<='Z')
printf("This is a capital letter\n");
else if(c>='a'&&c<='z')
printf("This is a small letter\n");
else
printf("This is an other character\n");
本例要求判别键盘输入字符的类别。可以根据输入字符的ASCII码来判别类型。由ASCII码表可知ASCII值小于32的为控制字符。 在“0”和“9”之间的为数字，在“A”和“Z”之间为大写字母， 在“a”和“z”之间为小写字母，其余则为其它字符。 这是一个多分支选择的问题，用if-else-if语句编程，判断输入字符ASCII码所在的范围，分别给出不同的输出。例如输入为“g”，输出显示它为小写字符。

4.在使用if语句中还应注意以下问题

(1) 在三种形式的if语句中，在if关键字之后均为表达式。 该表达式通常是逻辑表达式或关系表达式， 但也可以是其它表达式，如赋值表达式等，甚至也可以是一个变量。例如： if(a=5) 语句；if(b) 语句； 都是允许的。只要表达式的值为非0，即为“真”。如在if(a=5)…；中表达式的值永远为非0，所以其后的语句总是要执行的，当然这种情况在程序中不一定会出现，但在语法上是合法的。
又如，有程序段： if(a=b)
printf("%d",a);
else
printf("a=0"); 本语句的语义是，把b值赋予a，如为非0则输出该值，否则输出“a=0”字符串。这种用法在程序中是经常出现的。

(2) 在if语句中，条件判断表达式必须用括号括起来， 在语句之后必须加分号。

(3) 在if语句的三种形式中，所有的语句应为单个语句，如果要想在满足条件时执行一组(多个)语句，则必须把这一组语句用{} 括起来组成一个复合语句。但要注意的是在}之后不能再加分号。
例如：
if(a>b){
a++;
b++;
}
else{ a=0;
b=10;
}

ｉｆ语句的嵌套

当if语句中的执行语句又是if语句时，则构成了if 语句嵌套的情形。其一般形式可表示如下：
if(表达式)
if语句；
或者为
if(表达式)
if语句；
else
if语句；
在嵌套内的if语句可能又是if-else型的，这将会出现多个if和多个else重叠的情况，这时要特别注意if和else的配对问题。例如：
if(表达式1)
if(表达式2)
语句1；
else
语句2；
其中的else究竟是与哪一个if配对呢?
应该理解为：　　　还是应理解为：
if(表达式1) 　　　if(表达式1)
　 if(表达式2) 　　　　if(表达式2)
　　 语句1； 　　　　　　语句1；
else 　　　　　　　 else
　　 语句2； 　　　　　　语句2；
为了避免这种二义性，Ｃ语言规定，else 总是与它前面最近的if配对，因此对上述例子应按前一种情况理解。
void main(){
int a,b;
printf("please input A,B: ");
scanf("%d%d",&a,&b);
if(a!=b)
if(a>b) printf("A>B\n");
else printf("A<B\n");
else printf("A=B\n");
}
比较两个数的大小关系。
printf("please input A,B: ");
scanf("%d%d",&a,&b);
if(a!=b)
if(a>b) printf("A>B\n");
else printf("A<B\n");
else printf("A=B\n");
本例中用了if语句的嵌套结构。 采用嵌套结构实质上是为了进行多分支选择，例3.16实际上有三种选择即A>B、A<B或A=B。这种问题用if-else-if语句也可以完成。而且程序更加清晰。因此， 在一般情况下较少使用if语句的嵌套结构。 以使程序更便于阅读理解。
void main(){
int a,b;
printf("please input A,B: ");
scanf("%d%d",&a,&b);
if(a==b) printf("A=B\n");
else if(a>b) printf("A>B\n");
else printf("A<B\n");
}

条件运算符和条件表达式

如果在条件语句中，只执行单个的赋值语句时， 常可使用条件表达式来实现。不但使程序简洁，也提高了运行效率。
条件运算符为?和：，它是一个三目运算符，即有三个参与运算的量。由条件运算符组成条件表达式的一般形式为：
表达式1? 表达式2： 表达式3
其求值规则为：如果表达式1的值为真，则以表达式2 的值作为条件表达式的值，否则以表达式2的值作为整个条件表达式的值。 条件表达式通常用于赋值语句之中。
例如条件语句：
if(a>b) max=a;
else max=b;
可用条件表达式写为 max=(a>b)?a:b; 执行该语句的语义是：如a>b为真，则把a赋予max，否则把b 赋予max。
使用条件表达式时，还应注意以下几点：
1. 条件运算符的运算优先级低于关系运算符和算术运算符，但高于赋值符。因此 max=(a>b)?a:b可以去掉括号而写为 max=a>b?a:b
2. 条件运算符?和：是一对运算符，不能分开单独使用。
3. 条件运算符的结合方向是自右至左。
例如：
a>b?a:c>d?c:d应理解为
a>b?a:(c>d?c:d) 这也就是条件表达式嵌套的情形，即其中的表达式3又是一个条
件表达式。
void main(){
int a,b,max;
printf("\n input two numbers: ");
scanf("%d%d",&a,&b);
printf("max=%d",a>b?a:b);
}
用条件表达式对上例重新编程，输出两个数中的大数。

ｓｗｉｔｃｈ语句

Ｃ语言还提供了另一种用于多分支选择的switch语句， 其一般形式为：
switch(表达式){
case常量表达式1: 语句1;
case常量表达式2: 语句2;
…
case常量表达式n: 语句n;
default : 语句n+1;
}
其语义是：计算表达式的值。 并逐个与其后的常量表达式值相比较，当表达式的值与某个常量表达式的值相等时， 即执行其后的语句，然后不再进行判断，继续执行后面所有case后的语句。 如表达式的值与所有case后的常量表达式均不相同时，则执行default后的语句。
void main(){
int a;
printf("input integer number: ");
scanf("%d",&a);
switch (a){
case 1:printf("Monday\n");
case 2:printf("Tuesday\n");
case 3:printf("Wednesday\n");
case 4:printf("Thursday\n");
case 5:printf("Friday\n");
case 6:printf("Saturday\n");
case 7:printf("Sunday\n");
default:printf("error\n");
}
}

本程序是要求输入一个数字，输出一个英文单词。但是当输入3之后，却执行了case3以及以后的所有语句，输出了Wednesday 及以后的所有单词。这当然是不希望的。为什么会出现这种情况呢?这恰恰反应了switch语句的一个特点。在switch语句中，“case 常量表达式”只相当于一个语句标号， 表达式的值和某标号相等则转向该标号执行，但不能在执行完该标号的语句后自动跳出整个switch 语句，所以出现了继续执行所有后面case语句的情况。 这是与前面介绍的if语句完全不同的，应特别注意。为了避免上述情况， Ｃ语言还提供了一种break语句，专用于跳出switch语句，break 语句只有关键字break，没有参数。在后面还将详细介绍。修改例题的程序，在每一case语句之后增加break 语句， 使每一次执行之后均可跳出switch语句，从而避免输出不应有的结果。
void main(){
int a;
printf("input integer number: ");
scanf("%d",&a);
switch (a){
case 1:printf("Monday\n");break;
case 2:printf("Tuesday\n"); break;
case 3:printf("Wednesday\n");break;
case 4:printf("Thursday\n");break;
case 5:printf("Friday\n");break;
case 6:printf("Saturday\n");break;
case 7:printf("Sunday\n");break;
default:printf("error\n");
}
}
在使用switch语句时还应注意以下几点：
1.在case后的各常量表达式的值不能相同，否则会出现错误。
2.在case后，允许有多个语句，可以不用{}括起来。
3.各case和default子句的先后顺序可以变动，而不会影响程序执行结果。
4.default子句可以省略不用。程序举例
输入三个整数，输出最大数和最小数。
void main(){
int a,b,c,max,min;
printf("input three numbers: ");
scanf("%d%d%d",&a,&b,&c);
if(a>b)
{max=a;min=b;}
else
{max=b;min=a;}
if(max<c)
max=c;
else
if(min>c)
min=c;
printf("max=%d\nmin=%d",max,min);
}

本程序中，首先比较输入的a,b的大小，并把大数装入max， 小数装入min中，然后再与c比较，若max小于c，则把c赋予max；如果c小于min，则把c赋予min。因此max内总是最大数，而min内总是最小数。最后输出max和min的值即可。 计算器程序。用户输入运算数和四则运算符， 输出计算结果。
void main(){
float a,b,s;
char c;
printf("input expression: a+(-,*,/)b \n");
scanf("%f%c%f",&a,&c,&b);
switch(c){
case '+': printf("%f\n",a+b);break;
case '-': printf("%f\n",a-b);break;
case '*': printf("%f\n",a*b);break;
case '/': printf("%f\n",a/b);break;
default: printf("input error\n");
}
}

float a,b,s;
char c;
printf("input expression: a+(-,*,/)b \n");
scanf("%f%c%f",&a,&c,&b);
switch(c){
case '+': printf("%f\n",a+b);break;
case '-': printf("%f\n",a-b);break;
case '*': printf("%f\n",a*b);break;
case '/': printf("%f\n",a/b);break;
default: printf("input error\n");
}
本例可用于四则运算求值。switch语句用于判断运算符， 然后输出运算值。当输入运算符不是+,-,*,/时给出错误提示。

循环结构程序

循环结构是程序中一种很重要的结构。其特点是， 在给定条件成立时，反复执行某程序段，直到条件不成立为止。 给定的条件称为循环条件，反复执行的程序段称为循环体。 Ｃ语言提供了多种循环语句，可以组成各种不同形式的循环结构。

ｗｈｉｌｅ语句

while语句的一般形式为： while(表达式)语句； 其中表达式是循环条件，语句为循环体。
while语句的语义是：计算表达式的值，当值为真(非0)时， 执行循环体语句。其执行过程可用图3―4表示。 统计从键盘输入一行字符的个数。
#include <stdio.h>
void main(){
int n=0;
printf("input a string:\n");
while(getchar()!='\n') n++;
printf("%d",n);
} int n=0;
printf("input a string:\n");
while(getchar()!='\n')
n++;
printf("%d",n);
本例程序中的循环条件为getchar()!='\n',其意义是， 只要从键盘输入的字符不是回车就继续循环。循环体n++完成对输入字符个数计数。从而程序实现了对输入一行字符的字符个数计数。
使用while语句应注意以下几点：
1.while语句中的表达式一般是关系表达或逻辑表达式，只要表达式的值为真(非0)即可继续循环。
void main(){
int a=0,n;
printf("\n input n: ");
scanf("%d",&n);
while (n--)
printf("%d ",a++*2);
} int a=0,n;
printf("\n input n: ");
scanf("%d",&n);
while (n--)
printf("%d ",a++*2);
本例程序将执行n次循环，每执行一次，n值减1。循环体输出表达式a++*2的值。该表达式等效于(a*2；a++)
2.循环体如包括有一个以上的语句，则必须用{}括起来， 组成复合语句。
3.应注意循环条件的选择以避免死循环。
void main(){
int a,n=0;
while(a=5)
printf("%d ",n++);
} int a,n=0;
while(a=5)
printf("%d ",n++);
本例中while语句的循环条件为赋值表达式a=5， 因此该表达式的值永远为真，而循环体中又没有其它中止循环的手段， 因此该循环将无休止地进行下去，形成死循环。4.允许while语句的循环体又是while语句，从而形成双重循环。

ｄｏ－ｗｈｉｌｅ语句

do-while语句的一般形式为：
do
语句；
while(表达式)；
其中语句是循环体，表达式是循环条件。
do-while语句的语义是：
先执行循环体语句一次， 再判别表达式的值，若为真(非0)则继续循环，否则终止循环。
do-while语句和while语句的区别在于do-while是先执行后判断，因此do-while至少要执行一次循环体。而while是先判断后执行，如果条件不满足，则一次循环体语句也不执行。
while语句和do-while语句一般都可以相互改写。
void main(){
int a=0,n;
printf("\n input n: ");
scanf("%d",&n);
do printf("%d ",a++*2);
while (--n);
}
int a=0,n;
printf("\n input n: ");
scanf("%d",&n);
do printf("%d ",a++*2);
while (--n);
在本例中，循环条件改为--n，否则将多执行一次循环。这是由于先执行后判断而造成的。
对于do-while语句还应注意以下几点：
1.在if语句，while语句中， 表达式后面都不能加分号， 而在 do-while语句的表达式后面则必须加分号。
2.do-while语句也可以组成多重循环，而且也可以和while语句相互嵌套。
3.在do和while之间的循环体由多个语句组成时，也必须用{}括起来组成一个复合语句。
4.do-while和while语句相互替换时，要注意修改循环控制条件。

ｆｏｒ语句

for语句是Ｃ语言所提供的功能更强，使用更广泛的一种循环语句。其一般形式为：
for(表达式1；表达式2；表达3)
语句；
表达式1　通常用来给循环变量赋初值，一般是赋值表达式。也允许在for语句外给循环变量赋初值，此时可以省略该表达式。
表达式2　通常是循环条件，一般为关系表达式或逻辑表达式。
表达式3　通常可用来修改循环变量的值，一般是赋值语句。
这三个表达式都可以是逗号表达式， 即每个表达式都可由多个表达式组成。三个表达式都是任选项，都可以省略。
一般形式中的“语句”即为循环体语句。for语句的语义是：
1.首先计算表达式1的值。
2.再计算表达式2的值，若值为真(非0)则执行循环体一次， 否则跳出循环。
3.然后再计算表达式3的值，转回第2步重复执行。在整个for循环过程中，表达式1只计算一次，表达式2和表达式，3则可能计算多次。循环体可能多次执行，也可能一次都不执行。for 语句的执行过程如图所示。
void main(){
int n,s=0;
for(n=1;n<=100;n++)
s=s+n;
printf("s=%d\n",s);
}
用for语句计算s=1+2+3+...+99+100

int n,s=0;
for(n=1;n<=100;n++)
s=s+n;
printf("s=%d\n",s);
本例for语句中的表达式3为n++，实际上也是一种赋值语句，相当于n=n+1，以改变循环变量的值。
void main(){
int a=0,n;
printf("\n input n: ");
scanf("%d",&n);
for(;n>0;a++,n--)
printf("%d ",a*2);
}
用for语句修改例题。从0开始，输出n个连续的偶数。
int a=0,n;
printf("\n input n: ");
scanf("%d",&n);
for(;n>0;a++,n--)
printf("%d ",a*2);
本例的for语句中，表达式1已省去，循环变量的初值在for语句之前由scanf语句取得，表达式3是一个逗号表达式，由a++，n-- 两个表达式组成。每循环一次a自增1，n自减1。a的变化使输出的偶数递增，n的变化控制循次数。
在使用for语句中要注意以下几点
1.for语句中的各表达式都可省略，但分号间隔符不能少。如：for(；表达式；表达式)省去了表达式1。for(表达式；；表达式)省去了表达式2。
for(表达式；表达式；)省去了表达式3。for(；；)省去了全部表达式。
2.在循环变量已赋初值时，可省去表达式1，如例3.27即属于这种情形。如省去表达式2或表达式3则将造成无限循环， 这时应在循环体内设法结束循环。例题即属于此情况。
void main(){
int a=0,n;
printf("\n input n: ");
scanf("%d",&n);
for(;n>0;)
{ a++;n--;
printf("%d ",a*2);
}
} int a=0,n;
printf("\n input n: ");
scanf("%d",&n);
for(;n>0;)
{ a++;n--;
printf("%d ",a*2);
}
本例中省略了表达式1和表达式3，由循环体内的n--语句进行循环变量n的递减，以控制循环次数。
void main(){
int a=0,n;
printf("\n input n: ");
scanf("%d",&n);
for(;;){
a++;n--;
printf("%d ",a*2);
if(n==0)break;
}
}
int a=0,n;
printf("\n input n: ");
scanf("%d",&n);
for(;;){
a++;n--;
printf("%d ",a*2);
if(n==0)break;
}
本例中for语句的表达式全部省去。由循环体中的语句实现循环变量的递减和循环条件的判断。当n值为0时，由break语句中止循环，转去执行for以后的程序。在此情况下，for语句已等效于while( 1)语句。如在循环体中没有相应的控制手段，则造成死循环。
3.循环体可以是空语句。
#include"stdio.h"
void main(){
int n=0;
printf("input a string:\n");
for(;getchar()!='\n';n++);
printf("%d",n);
}
本例中，省去了for语句的表达式1，表达式3也不是用来修改循环变量，而是用作输入字符的计数。这样， 就把本应在循环体中完成的计数放在表达式中完成了。因此循环体是空语句。应注意的是，空语句后的分号不可少，如缺少此分号，则把后面的printf 语句当成循环体来执行。反过来说，如循环体不为空语句时， 决不能在表达式的括号后加分号， 这样又会认为循环体是空语句而不能反复执行。这些都是编程中常见的错误，要十分注意。
4.for语句也可与while,do-while语句相互嵌套，构成多重循环。以下形成都合法的嵌套。
(1)for(){…
　　 while()
　　　 {…}
　　 …
　　　　 }
(2)do{
　　　 …
　　 for()
　　　 {…}
　　 …
　　 }while();
(3)while(){
　　　　　　 …
　　　　　　 for()
　　　　　　　 {…}
　　　　　　 …
　　　　　 }
(4)for(){
　　　　 …
　　　　 for(){
　　　　 …
　　　　　 }
　　　　 }
void main(){
int i,j,k;
for(i=1;i<=3;i++)
{ for(j=1;j<=3-i+5;j++)
printf(" ");
for(k=1;k<=2*i-1+5;k++)
{
if(k<=5) printf(" ");
else printf("*");
}
printf("\n");
}
}

转移语句

程序中的语句通常总是按顺序方向， 或按语句功能所定义的方向执行的。如果需要改变程序的正常流向， 可以使用本小节介绍的转移语句。在Ｃ语言中提供了4种转移语句：
goto,break, continue和return。
其中的return语句只能出现在被调函数中， 用于返回主调函数，我们将在函数一章中具体介绍。 本小节介绍前三种转移语句。

1.goto语句

goto语句也称为无条件转移语句，其一般格式如下： goto 语句标号； 其中语句标号是按标识符规定书写的符号， 放在某一语句行的
前面，标号后加冒号(：)。语句标号起标识语句的作用，与goto 语句配合使用。
如： label: i++;
loop: while(x<7);
Ｃ语言不限制程序中使用标号的次数，但各标号不得重名。goto语句的语义是改变程序流向， 转去执行语句标号所标识的语句。
goto语句通常与条件语句配合使用。可用来实现条件转移， 构成循环，跳出循环体等功能。
但是，在结构化程序设计中一般不主张使用goto语句， 以免造成程序流程的混乱，使理解和调试程序都产生困难。
统计从键盘输入一行字符的个数。
#include"stdio.h"
void main(){
int n=0;
printf("input a string\n");
loop: if(getchar()!='\n')
{ n++;
goto loop;
}
printf("%d",n);
} int n=0;
printf("input a string\n");
loop: if(getchar()!='\n')
{ n++;
goto loop;
}
printf("%d",n);
本例用if语句和goto语句构成循环结构。当输入字符不为'\n'时即执行n++进行计数，然后转移至if语句循环执行。直至输入字符为'\n'才停止循环。

ｂｒｅａｋ语句

break语句只能用在switch 语句或循环语句中， 其作用是跳出switch语句或跳出本层循环，转去执行后面的程序。由于break语句的转移方向是明确的，所以不需要语句标号与之配合。break语句的一般形式为： break; 上面例题中分别在switch语句和for语句中使用了break 语句作为跳转。使用break语句可以使循环语句有多个出口，在一些场合下使编程更加灵活、方便。 
ｃｏｎｔｉｎｕｅ语句

continue语句只能用在循环体中，其一般格式是：
continue;
其语义是：结束本次循环，即不再执行循环体中continue 语句之后的语句，转入下一次循环条件的判断与执行。应注意的是， 本语句只结束本层本次的循环，并不跳出循环。
void main(){
int n;
for(n=7;n<=100;n++)
{
if (n%7!=0)
continue;
printf("%d ",n);
}
}
输出100以内能被7整除的数。
int n;
for(n=7;n<=100;n++)
{
if (n%7!=0)
continue;
printf("%d ",n);
}
本例中，对7～100的每一个数进行测试，如该数不能被7整除，即模运算不为0，则由continus语句转去下一次循环。只有模运算为0时，才能执行后面的printf语句，输出能被7整除的数。
#include"stdio.h"
void main(){
char a,b;
printf("input a string:\n");
b=getchar();
while((a=getchar())!='\n'){
if(a==b){
printf("same character\n");
break;
}b=a;
}
}
检查输入的一行中有无相邻两字符相同。
char a,b;
printf("input a string:\n");
b=getchar();
while((a=getchar())!='\n'){
if(a==b){
printf("same character\n");
break;
}b=a;
}
本例程序中，把第一个读入的字符送入b。然后进入循环，把下一字符读入a，比较a,b是否相等，若相等则输出提示串并中止循环，若不相等则把a中的字符赋予b，输入下一次循环。
输出100以内的素数。素数是只能被1 和本身整除的数。可用穷举法来判断一个数是否是素数。
void main(){
int n,i;
for(n=2;n<=100;n++){
for(i=2;i<n;i++)
if(n%i==0) break;
if(i>=n) printf("\t%d",n);
}
} int n,i;
for(n=2;n<=100;n++){
for(i=2;i<n;i++)
if(n%i==0) break;
if(i>=n) printf("\t%d",n);
}
本例程序中，第一层循环表示对1～100这100个数逐个判断是否是素数，共循环100次，在第二层循环中则对数n用2～n-1逐个去除，若某次除尽则跳出该层循环，说明不是素数。 如果在所有的数都是未除尽的情况下结束循环，则为素数，此时有i>=n， 故可经此判断后输出素数。然后转入下一次大循环。实际上，2以上的所有偶数均不是素数，因此可以使循环变量的步长值改为2，即每次增加2，此外只需对数n用2～n去除就可判断该数是否素数。这样将大大减少循环次数，减少程序运行时间。
#include"math.h"
void main(){
int n,i,k;
for(n=2;n<=100;n+=2){
k=sqrt(n);
for(i=2;i<k;i++)
if(n%i==0) break;
if(i>=k) printf("\t%2d",n);
}
}

小结

1.从程序执行的流程来看， 程序可分为三种最基本的结构： 顺序结构，分支结构以及循环结构

2.程序中执行部分最基本的单位是语句。Ｃ语言的语句可分为五类：
(1)表达式语句　　任何表达式末尾加上分号即可构成表达式语句， 常用的表达式语句为赋值语句。
(2)函数调用语句　　由函数调用加上分号即组成函数调用语句。
(3)控制语句　　用于控制程序流程，由专门的语句定义符及所需的表达式组成。主要有条件判断执行语句，循环执行语句，转向语句等。
(4)复合语句　　由{}把多个语句括起来组成一个语句。 复合语句被认为是单条语句，它可出现在所有允许出现语句的地方，如循环体等。
(5)空语句　　仅由分号组成，无实际功能。

3.Ｃ语言中没有提供专门的输入输出语句， 所有的输入输出都是由调用标准库函数中的输入输出函数来实现的。
scanf和getchar函数是输入函数，接收来自键盘的输入数据。
scanf是格式输入函数， 可按指定的格式输入任意类型数据。
getchar函数是字符输入函数， 只能接收单个字符。
printf和putchar函数是输出函数，向显示器屏幕输出数据。
printf是格式输出函数，可按指定的格式显示任意类型的数据。
putchar是字符显示函数，只能显示单个字符。

4.关系表达式和逻辑表达式是两种重要的表达式， 主要用于条件执行的判断和循环执行的判断。

5.Ｃ语言提供了多种形式的条件语句以构成分支结构。
(1)if语句主要用于单向选择。
(2)if-else语句主要用于双向选择。
(3)if-else-if语和switch语句用于多向选择。
这几种形式的条件语句一般来说是可以互相替代的。

6.Ｃ语言提供了三种循环语句。
(1)for语句主要用于给定循环变量初值， 步长增量以及循环次数的循环结构。
(2)循环次数及控制条件要在循环过程中才能确定的循环可用 while或do-while语句。
(3)三种循环语句可以相互嵌套组成多重循环。循环之间可以并列但不能交叉。
(4)可用转移语句把流程转出循环体外，但不能从外面转向循环体内。
(5)在循环程序中应避免出现死循环，即应保证循环变量的值在运行过程中可以得到修改，并使循环条件逐步变为假，从而结束循环。

7.Ｃ语言语句小结
名 称　　　　　　　　　一 般 形 式
简单语句　　　　　　　表达式语句表达式;
空语句;
复合语句 　　　　　　 { 语句 }
条件语句　　　　　　　if(表达式)语句;
　　　　　　　　　　　 if(表达式)语句1; else语句2;
　　　　　　　　　　　 if(表达式1)语句1; else if(表达式2) 语句2…else语句 n;
开关语句 　　　　　　 switch(表达式){ case常量表达式: 语句…default: 语句; }
循环语句　　　　　　　while语句
　　　　　　　　　　　 while(表达式)语句;
　　　　　　　　　　　 for语句 for(表达式1; 表达式2; 表达式3)语句;
　　　　　　　　　　　 break语句 break;
　　　　　　　　　　　 goto语句 goto;
　　　　　　　　　　　 continue语句 continue;
　　　　　　　　　　　 return 语句 return(表达式);

 
